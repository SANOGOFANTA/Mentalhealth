name: Mental Health Analyzer CI/CD

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  actions: write

jobs:
  mental-health-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Setup CML
      uses: iterative/setup-cml@v2
      
    - name: Install dependencies
      run: make install
      
    - name: Download NLTK data
      run: |
        python -c "
        import nltk
        nltk.download('punkt')
        nltk.download('stopwords') 
        nltk.download('wordnet')
        nltk.download('omw-1.4')
        "
        
    - name: Format code
      run: make format
      
    - name: Create sample dataset (for demo)
      run: |
        python -c "
        import pandas as pd
        import os
        
        # Create sample data for testing
        sample_data = {
            'statement': [
                'I feel very anxious about everything in my life',
                'Today is a beautiful day and I feel great',
                'I am so depressed and cannot get out of bed',
                'Life is wonderful and full of opportunities',
                'I have been having panic attacks lately',
                'I feel stressed about work but managing well',
                'Everything seems hopeless and dark',
                'I am grateful for my family and friends'
            ],
            'status': [
                'Anxiety', 'Normal', 'Depression', 'Normal',
                'Anxiety', 'Stress', 'Depression', 'Normal'
            ]
        }
        
        os.makedirs('Mentalhealth/Data', exist_ok=True)
        df = pd.DataFrame(sample_data)
        
        # Duplicate data to have enough samples
        df_expanded = pd.concat([df] * 100, ignore_index=True)
        df_expanded.to_csv('Mentalhealth/Data/Mentalhealth.csv', index=False)
        print(f'Created sample dataset with {len(df_expanded)} samples')
        "
        
    - name: Train models
      run: make train
      
    - name: Generate evaluation report
      env:
        REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: make eval
      
    - name: Upload model artifacts
      uses: actions/upload-artifact@v3
      with:
        name: mental-health-models
        path: |
          Mentalhealth/Model/
          Mentalhealth/Results/
        retention-days: 30
        
    - name: Test model predictions
      run: |
        python -c "
        import sys
        import os
        sys.path.append('.')
        
        # Test if models can be loaded and used
        print('Testing model loading and prediction...')
        
        try:
            import pickle
            import pandas as pd
            
            # Check if model files exist
            model_files = [
                'Mentalhealth/Model/logistic_regression_model.pkl',
                'Mentalhealth/Model/vectorizer.pkl',
                'Mentalhealth/Model/label_encoder.pkl'
            ]
            
            for file in model_files:
                if os.path.exists(file):
                    print(f'✓ {file} exists')
                else:
                    print(f'✗ {file} missing')
                    
            print('Model testing completed!')
            
        except Exception as e:
            print(f'Error during model testing: {e}')
            sys.exit(1)
        "

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    - name: Install quality tools
      run: |
        pip install black flake8 pylint
    - name: Run Black formatter check
      run: |
        black --check *.py || echo "Code formatting issues found"
    - name: Run Flake8 linter
      run: |
        flake8 *.py --max-line-length=100 --ignore=E501,W503 || echo "Linting issues found"
